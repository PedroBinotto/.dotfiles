#!/bin/sh

### OPTIONS AND VARIABLES ###

while getopts ":a:r:b:p:h" o; do case "${o}" in
    h) printf "Optional arguments for custom use:\\n  -r: Dotfiles repository (local file or url)\\n  -p: Dependencies and programs csv (local file or url)\\n  -a: AUR helper (must have pacman-like syntax)\\n  -h: Show this message\\n" && exit 1 ;;
    r) dotfilesrepo=${OPTARG} && git ls-remote "$dotfilesrepo" || exit 1 ;;
    b) repobranch=${OPTARG} ;;
    p) progsfile=${OPTARG} ;;
    a) aurhelper=${OPTARG} ;;
    *) printf "Invalid option: -%s\\n" "$OPTARG" && exit 1 ;;
esac done

[ -z "$dotfilesrepo" ] && dotfilesrepo="https://github.com/PedroBinotto/.dotfiles.git"
[ -z "$progsfile" ] && progsfile="https://raw.githubusercontent.com/PedroBinotto/.dotfiles/main/progfile.csv"
[ -z "$aurhelper" ] && aurhelper="yay"
[ -z "$repobranch" ] && repobranch="master"

### FUNCTIONS ###

installpkg(){ pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 ;}

error() { printf "%s\n" "$1" >&2; exit 1; }

yesno() {
    read -p "Proceed? (y/n) " yn
    while true; do
        case $yn in
            [Yy]* ) break;;
            [Nn]* ) exit 0;;
            * ) echo "Please answer y/n.";;
        esac
    done
}

welcomemsg() { \
    printf "\n ** WELCOME **"
    printf "\n\n"
    printf "Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail.\n"
    yesno
    }

getuserandpass() { \
    # Prompts user for new username an password.
    read -p "First, please enter a name for the user account: " name || exit 1
    while ! echo "$name" | grep -q "^[a-z_][a-z0-9_-]*$"; do
        read -p "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _: " name
    done
    read -s -p "Enter a password for that user." pass1
    printf "\n"
    read -s -p "Retype password." pass2
    while ! [ "$pass1" = "$pass2" ]; do
        unset pass2
        printf "\n\n"
        echo "Passwords do not match."
        printf "\n\n"
        read -s -p "Enter password again: " pass1
        printf "\n"
        read -s -p "Retype password: " pass2
    done ;}

usercheck() { \
    ! { id -u "$name" >/dev/null 2>&1; } ||
    printf "\n\nWARNING!\n\n"
    printf "The user \`$name\` already exists on this system. LARBS can install for a user already existing, but it will *overwrite* any conflicting settings/dotfiles on the user account.\n\nLARBS will *not* overwrite your user files, documents, videos, etc., so don't worry about that, but proceed only if you don't mind your settings being overwritten.\n\nNote also that LARBS will change $name's password to the one you just gave.\n"
    yesno
    }

preinstallmsg() { \
    printf "\nLet's get this party started!\n"
    printf "\nThe rest of the installation will now be totally automated, so you can sit back and relax.\n\nIt will take some time, but when done, you can relax even more with your complete system.\n"
    yesno
    }

adduserandpass() { \
    # Adds user `$name` with password $pass1.
    printf "Adding user \'$name\'...\n"
    useradd -m -g wheel -s /bin/zsh "$name" >/dev/null 2>&1 ||
    usermod -a -G wheel "$name" && mkdir -p /home/"$name" && chown "$name":wheel /home/"$name"
    export repodir="/home/$name/.local/src"; mkdir -p "$repodir"; chown -R "$name":wheel "$(dirname "$repodir")"
    echo "$name:$pass1" | chpasswd
    unset pass1 pass2 ;}

refreshkeys() { \
    case "$(readlink -f /sbin/init)" in
        *systemd* )
            printf "Refreshing Arch Keyring...\n"
            pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1
            ;;
        *)
            printf "Enabling Arch Repositories...\n"
            pacman --noconfirm --needed -S artix-keyring artix-archlinux-support >/dev/null 2>&1
            for repo in extra community; do
                grep -q "^\[$repo\]" /etc/pacman.conf ||
                    echo "[$repo]
Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
            done
            pacman -Sy >/dev/null 2>&1
            pacman-key --populate archlinux
            ;;
    esac ;}

newperms() { # Set special sudoers settings for install (or after).
    sed -i "/#LARBS/d" /etc/sudoers
    echo "$* #LARBS" >> /etc/sudoers ;}

manualinstall() { # Installs $1 manually. Used only for AUR helper here.
    # Should be run after repodir is created and var is set.
    printf "Installing \"$1\", an AUR helper...\n"
    sudo -u "$name" mkdir -p "$repodir/$1"
    sudo -u "$name" git clone --depth 1 "https://aur.archlinux.org/$1.git" "$repodir/$1" >/dev/null 2>&1 ||
        { cd "$repodir/$1" || return 1 ; sudo -u "$name" git pull --force origin master;}
    cd "$repodir/$1"
    sudo -u "$name" -D "$repodir/$1" makepkg --noconfirm -si >/dev/null 2>&1 || return 1
}

maininstall() { # Installs all needed programs from main repo.
    printf "\nLARBS Installation\n"
    printf "Installing \`$1\` ($n of $total). $1 $2\n"
    installpkg "$1"
    }

gitmakeinstall() {
    progname="$(basename "$1" .git)"
    dir="$repodir/$progname"
    printf "\nLARBS Installation\n"
    printf "Installing \`$progname\` ($n of $total) via \`git\` and \`make\`. $(basename '$1') $2"
    sudo -u "$name" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return 1 ; sudo -u "$name" git pull --force origin master;}
    cd "$dir" || exit 1
    make >/dev/null 2>&1
    make install >/dev/null 2>&1
    cd /tmp || return 1 ;}

aurinstall() { \
    printf "\nLARBS Installation\n"
    printf "Installing \`$1\` ($n of $total) from the AUR. $1 $2\n"
    echo "$aurinstalled" | grep -q "^$1$" && return 1
    sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1
    }

pipinstall() { \
    printf "\nLARBS Installation\n"
    printf "Installing the Python package \`$1\` ($n of $total). $1 $2\n"
    [ -x "$(command -v "pip")" ] || installpkg python-pip >/dev/null 2>&1
    yes | pip install "$1"
    }

installationloop() { \
    ([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^#/d' > /tmp/progs.csv
    total=$(wc -l < /tmp/progs.csv)
    aurinstalled=$(pacman -Qqm)
    while IFS=, read -r tag program comment; do
        n=$((n+1))
        echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
        case "$tag" in
            "A") aurinstall "$program" "$comment" ;;
            "G") gitmakeinstall "$program" "$comment" ;;
            "P") pipinstall "$program" "$comment" ;;
            *) maininstall "$program" "$comment" ;;
        esac
    done < /tmp/progs.csv ;}

putgitrepo() { # Downloads a gitrepo $1 and places the files in $2 only overwriting conflicts
    printf "Downloading and installing config files...\n"
    [ -z "$3" ] && branch="master" || branch="$repobranch"
    dir=$(mktemp -d)
    [ ! -d "$2" ] && mkdir -p "$2"
    chown "$name":wheel "$dir" "$2"
    sudo -u "$name" git clone --recursive -b "$branch" --depth 1 --recurse-submodules "$1" "$dir" >/dev/null 2>&1
    sudo -u "$name" cp -rfT "$dir" "$2"
    }

systembeepoff() {
    printf "Getting rid of that retarded error beep sound...\n"
    rmmod pcspkr
    echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf ;}

finalize(){ \
    printf "Preparing welcome message...\n"
    printf "\nAll done!\n"
    printf "Congrats! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\n\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\n\n"
    }

### THE ACTUAL SCRIPT ###

### This is how everything happens in an intuitive format and order.

# Check if user is root on Arch distro.
pacman --noconfirm --needed -Sy || error "Are you sure you're running this as the root user, are on an Arch-based distribution and have an internet connection?"

# Welcome user and pick dotfiles.
welcomemsg || error "User exited."

# Get and verify username and password.
getuserandpass || error "User exited."

# Give warning if user already exists.
usercheck || error "User exited."

# Last chance for user to back out before install.
preinstallmsg || error "User exited."

### The rest of the script requires no user input.

# Refresh Arch keyrings.
refreshkeys || error "Error automatically refreshing Arch keyring. Consider doing so manually."

printf "\nLARBS Installation\n"
for x in curl ca-certificates base-devel git ntp zsh ; do
    printf "Installing \`$x\` which is required to install and configure other programs.\n"
    installpkg "$x"
done

printf "\nSynchronizing system time to ensure successful and secure installation of software...\n"
ntpdate 0.us.pool.ntp.org >/dev/null 2>&1

adduserandpass || error "Error adding username and/or password."

[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers # Just in case

# Allow user to run sudo without password. Since AUR programs must be installed
# in a fakeroot environment, this is required for all builds with AUR.
newperms "%wheel ALL=(ALL) NOPASSWD: ALL"

# Make pacman colorful, concurrent downloads and Pacman eye-candy.
grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
sed -i "s/^#ParallelDownloads = 8$/ParallelDownloads = 5/;s/^#Color$/Color/" /etc/pacman.conf

# Use all cores for compilation.
sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf

manualinstall yay-bin || error "Failed to install AUR helper."

# The command that does all the installing. Reads the progs.csv file and
# installs each needed program the way required. Be sure to run this only after
# the user has been created and has priviledges to run sudo without a password
# and all build dependencies are installed.
installationloop

printf "\nLARBS Installation\n"
printf "\nFinally, installing \`libxft-bgra\` to enable color emoji in suckless software without crashes.\n"
yes | sudo -u "$name" $aurhelper -S libxft-bgra-git >/dev/null 2>&1

# Install the dotfiles in the user's home directory
mkdir /home/$name/.dotfiles
putgitrepo "$dotfilesrepo" "/home/$name/.dotfiles" "$repobranch"
# Create default urls file if none exists.

# Most important command! Get rid of the beep!
systembeepoff

# Make zsh the default shell for the user.
chsh -s /bin/zsh "$name" >/dev/null 2>&1
sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"

# dbus UUID must be generated for Artix runit.
dbus-uuidgen > /var/lib/dbus/machine-id

# Use system notifications for Brave on Artix
echo "export \$(dbus-launch)" > /etc/profile.d/dbus.sh

# Fix fluidsynth/pulseaudio issue.
grep -q "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" /etc/conf.d/fluidsynth ||
    echo "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" >> /etc/conf.d/fluidsynth

# Start/restart PulseAudio.
pkill -15 -x 'pulseaudio'; sudo -u "$name" pulseaudio --start

# This line, overwriting the `newperms` command above will allow the user to run
# serveral important commands, `shutdown`, `reboot`, updating, etc. without a password.
newperms "%wheel ALL=(ALL) ALL #LARBS
%wheel ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/packer -Syu,/usr/bin/packer -Syyu,/usr/bin/systemctl restart NetworkManager,/usr/bin/rc-service NetworkManager restart,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/paru,/usr/bin/pacman -Syyuw --noconfirm"

# Last message! Install complete!
finalize
c
